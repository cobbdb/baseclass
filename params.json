{"name":"Baseclass","tagline":"Lean yet robust JavaScript inheritance.","body":"# BaseClass [![Bower version](https://badge.fury.io/bo/baseclass.svg)](http://badge.fury.io/bo/baseclass) [![NPM version](https://badge.fury.io/js/baseclassjs.svg)](http://badge.fury.io/js/baseclassjs)\r\n\r\nLean yet robust JavaScript inheritance.\r\n\r\n    $ bower install baseclass\r\n    $ npm install baseclassjs\r\n\r\n-------------\r\nBaseClass is an alternative to many of the overbearing and intrusive inheritance libraries\r\nsuch as Ember and even Fiber. Code in natural JavaScript but now with the power of simple\r\ninheritance.\r\n\r\n## BaseClass & extend()\r\nHere's a quick example showing a typical class setup.\r\n\r\n    // class-definition.js\r\n    var Pet = function (name) {\r\n        return {\r\n            name: name,\r\n            speak: function () {\r\n                console.log('Hi there!');\r\n            },\r\n            // Just add this one method to your base class and\r\n            // you're all set up! Simple as can be!\r\n            extend: BaseClass\r\n        };\r\n    };\r\n    var Dog = function (name) {\r\n        return Pet(name).extend({\r\n            color: 'grey',\r\n            speak: function () {\r\n                this.base.speak();\r\n                console.log(\"I'm \" + name + \" and I'm a \"  + this.color + ' dog.');\r\n            }\r\n        });\r\n    };\r\n\r\n    // my-app.js\r\n    var woofie = Dog('Woofie');\r\n    woofie.speak(); // --> Hi there! I'm Woofie and I'm a grey dog.\r\n\r\nThis inheritance chain can continue on as deep as you want it to be. To reach deeper into the\r\nchain, just use the `.base` notation. For example if you want data from two levels deep, that\r\nwould look like `child.base.base.data`.\r\n\r\nSince all properties are brought over to each child, your will always have access to an `extend`\r\nmethod to create more children.\r\n\r\n## BaseClass.Abstract\r\nIf you want your base class to enforce an override, you can use the `Abstract` method provided\r\nfrom the BaseClass function. Simply drop it into place like this:\r\n\r\n    // definition.js\r\n    var Vehicle = function (model) {\r\n        return {\r\n            extend: BaseClass,\r\n            model: model,\r\n            // Drop it in like any other property.\r\n            drive: BaseClass.Abstract\r\n        };\r\n    };\r\n    var Car = function (model) {\r\n        return Vehicle(model).extend({\r\n            color: 'blue'\r\n            // Notice we did -not- override the drive() method.\r\n        });\r\n    };\r\n\r\n    // my-app.js\r\n    var whip = Car('Honda');\r\n    whip.drive(); // --> Throws JS Error!\r\n\r\nCalling an abstract method that has not been overridden will result in a JS Error being thrown.\r\n\r\n## BaseClass.Stub\r\nSometimes you only want to reserve an attribute name to ensure that it's provided to all children.\r\nThis can be done easily with the `Stub` method.\r\n\r\n    // definition.js\r\n    var Vehicle = function (model) {\r\n        return {\r\n            extend: BaseClass,\r\n            model: model,\r\n            // Drop it in like any other property.\r\n            honk: BaseClass.Stub\r\n        };\r\n    };\r\n    var Car = function (model) {\r\n        return Vehicle(model).extend({\r\n            weight: '1000lbs'\r\n            // Notice we did -not- override the honk() method.\r\n        });\r\n    };\r\n\r\n    // my-app.js\r\n    var whip = Car('Honda');\r\n    whip.honk(); // --> Nothing happens.\r\n\r\n---------\r\n* See: http://cobbdb.github.io/baseclass/\r\n* See: http://github.com/cobbdb/baseclass\r\n* License: MIT\r\n","google":"UA-50240363-6","note":"Don't delete this file! It's used internally to help with page regeneration."}